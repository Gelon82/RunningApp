from turtledemo.penrose import start
from urllib.request import parse_http_list

from charset_normalizer.cli import query_yes_no
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from gpt import *
from util import *

# —Ç—É—Ç –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –Ω–∞—à –∫–æ–¥ :)
async def start (update, context):
    await show_main_menu(update, context,{
        "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé",
        "opener":"—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
        "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
        "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
        "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†"
    })
    dialog.mode="main"
    text=load_message("main")
    await send_text(update, context, text)
    await send_photo(update, context, "main")

async def gpt (update, context):
    dialog.mode = "gpt"
    text=load_message("gpt")
    await send_text(update, context, text)
    await send_photo(update, context, "gpt")

async def gpt_dialog(update, context):
    text=update.message.text
    pr=load_prompt("gpt")
    ans=await chatGpt.send_question(pr,text)
    await send_text(update, context, "Welcome to GPT Chat "+ans)

async def hi(update,context):
    if dialog.mode=="gpt":
        await gpt_dialog(update,context)
    if dialog.mode=="date":
        await date_dialog(update, context)
    if dialog.mode=="message":
        await message_dialog(update, context)

    else:
        await send_text(update,context,"*–ü—Ä–∏–≤–µ—Ç!*")
        await send_text(update, context, "_–ö–∞–∫ –¥–µ–ª–∞?_")
        await send_text(update, context, "–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "+update.message.text)
        await send_photo(update, context, "avatar_main")
        await send_text_buttons(update, context, "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å?",buttons={
            "start":"–∑–∞–ø—É—Å—Ç–∏—Ç—å",
            "stop":"–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
        })

async def date (update, context):
    dialog.mode = "date"
    text=load_message("date")
    await send_photo(update, context, "date")
    await send_text_buttons(update, context, text, {"date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
                                                    "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
                                                    "date_zendaya": "–ó–µ–Ω–¥–µ—è",
                                                    "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
                                                    "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏"
                                                    })

async def date_dialog(update, context):
    text=update.message.text
    mym=await send_text(update, context,"–¥–µ–¥—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç.. ")
    answer=await  chatGpt.add_message(text)
    await mym.edit_text(answer)
    await send_text(update, context,answer)

async def date_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    await send_photo(update, context,query)
    await send_html(update, context, "key press " + query)
    prompt = load_prompt(query)
    chatGpt.set_prompt(prompt)

async def message (update, context):
    dialog.mode = "message"
    text=load_message("message")
    await send_photo(update, context, "message")
    await send_text_buttons(update, context, text,{"message_next":"–æ—Ç–ø—Ä —Å–æ–æ–±—â","message_date":"–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ "})
    dialog.list.clear()
async def message_dialog(update, context):
    text=update.message.text
    dialog.list.append(text)

    #mym=await send_text(update, context,"–¥–µ–¥—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç.. ")
    #answer=await  chatGpt.add_message(text)
    #await mym.edit_text(answer)
    #await send_text(update, context,answer)

async def message_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()
    prompt = load_prompt(query)
    user_chat_hist="\n\n".join(dialog.list)
    mym = await send_text(update, context, "–¥–µ–¥—É—à–∫–∞ –¥—É–º–∞–µ—Ç –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç.. ")
    answer=await chatGpt.send_question(prompt,user_chat_hist)
    await mym.edit_text(answer)
    #await send_text(update,context,answer)

    #await send_photo(update, context,query)
    #await send_html(update, context, "key press " + query)



async def hi_button(update, context):
    query=update.callback_query.data
    if query=="start":
        await send_text(update, context, "_srted_")
    else:
        await send_text(update, context, "_stoped_")
dialog=Dialog()
dialog.mode=None
dialog.list=[]
chatGpt=ChatGptService(token="gpt:A03NYofv3ubgIx6f1SXnPAKmBZ0E9dS9Qcn2T2Zi1nOgo_QvJ0z8W5cWFvJFkblB3TavDiNT25x1--mRNrTISss9Vj3Q6lCoImv5cXw51H8RE70DG7rsRaf4bEE4")
app = ApplicationBuilder().token("7729544877:AAF1QzOvLfBL2MYRBEKvtlZIt-RZbi2p8gI").build()
app.add_handler(CommandHandler("start",start))
app.add_handler(CommandHandler("gpt",gpt))
app.add_handler(CommandHandler("date",date))
app.add_handler(CommandHandler("message",message))
app.add_handler(CallbackQueryHandler(date_button,pattern="^date_.*"))
app.add_handler(CallbackQueryHandler(message_button,pattern="^message_.*"))
app.add_handler(CallbackQueryHandler(hi_button))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND,hi))
app.run_polling()
